// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      UserRole @default(SALES_REP)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  customers Customer[]
  leads     Lead[]
  calls     Call[]
  appointments Appointment[]
  sentMessages Message[] @relation("MessageSender")
  receivedMessages Message[] @relation("MessageReceiver")
  tasks Task[] @relation("TaskAssignee")
  createdTasks Task[] @relation("TaskCreator")
  campaigns Campaign[]
  campaignExecutions CampaignExecution[]
  emergencyCalls EmergencyCall[] @relation("EmergencyCallHandler")
  serviceRequests ServiceRequest[] @relation("ServiceRequestAssignee")
  dispatchedServices ServiceRequest[] @relation("ServiceRequestDispatcher")
  serviceStatusUpdates ServiceStatusUpdate[]

  @@map("users")
}

model Customer {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  email       String?  @unique
  phone       String?
  address     String?
  city        String?
  state       String?
  zipCode     String?
  dateOfBirth DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  assignedTo   User?     @relation(fields: [assignedToId], references: [id])
  assignedToId String?
  vehicles     Vehicle[]
  leads        Lead[]
  calls        Call[]
  appointments Appointment[]
  messages     Message[]
  tasks        Task[]
  campaignExecutions CampaignExecution[]
  emergencyCalls EmergencyCall[]
  serviceRequests ServiceRequest[]
  serviceReviews ServiceReview[]

  @@map("customers")
}

model Vehicle {
  id           String      @id @default(cuid())
  vin          String      @unique
  make         String
  model        String
  year         Int
  color        String?
  mileage      Int?
  price        Decimal?
  status       VehicleStatus @default(AVAILABLE)
  description  String?
  features     String[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Relations
  customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?
  leads      Lead[]
  appointments Appointment[]
  emergencyCalls EmergencyCall[]
  serviceRequests ServiceRequest[]

  @@map("vehicles")
}

model Lead {
  id          String     @id @default(cuid())
  source      LeadSource
  status      LeadStatus @default(NEW)
  priority    Priority   @default(MEDIUM)
  notes       String?
  followUpDate DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  customer    Customer @relation(fields: [customerId], references: [id])
  customerId  String
  assignedTo  User?    @relation(fields: [assignedToId], references: [id])
  assignedToId String?
  vehicle     Vehicle? @relation(fields: [vehicleId], references: [id])
  vehicleId   String?
  calls       Call[]
  messages    Message[]
  tasks       Task[]
  campaignExecutions CampaignExecution[]

  @@map("leads")
}

model Call {
  id          String     @id @default(cuid())
  direction   CallDirection
  status      CallStatus @default(INITIATED)
  duration    Int?       // in seconds
  recording   String?    // URL to call recording
  transcript  String?    // AI-generated transcript
  summary     String?    // AI-generated summary
  sentiment   String?    // AI-analyzed sentiment
  outcome     String?
  notes       String?
  scheduledAt DateTime?
  startedAt   DateTime?
  endedAt     DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId String
  agent      User?    @relation(fields: [agentId], references: [id])
  agentId    String?
  lead       Lead?    @relation(fields: [leadId], references: [id])
  leadId     String?

  @@map("calls")
}

model Appointment {
  id          String            @id @default(cuid())
  title       String
  description String?
  type        AppointmentType
  status      AppointmentStatus @default(SCHEDULED)
  startTime   DateTime
  endTime     DateTime
  duration    Int               // in minutes
  location    String?
  notes       String?
  reminderSent Boolean          @default(false)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  customer    Customer @relation(fields: [customerId], references: [id])
  customerId  String
  assignedTo  User?    @relation(fields: [assignedToId], references: [id])
  assignedToId String?
  vehicle     Vehicle? @relation(fields: [vehicleId], references: [id])
  vehicleId   String?
  messages    Message[]
  tasks       Task[]
  campaignExecutions CampaignExecution[]

  @@map("appointments")
}

// Enums
enum UserRole {
  ADMIN
  MANAGER
  SALES_REP
  SUPPORT
}

enum VehicleStatus {
  AVAILABLE
  SOLD
  RESERVED
  MAINTENANCE
}

enum LeadSource {
  WEBSITE
  PHONE_CALL
  EMAIL
  REFERRAL
  WALK_IN
  SOCIAL_MEDIA
  ADVERTISEMENT
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  PROPOSAL_SENT
  NEGOTIATING
  CLOSED_WON
  CLOSED_LOST
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum CallDirection {
  INBOUND
  OUTBOUND
}

enum CallStatus {
  INITIATED
  RINGING
  ANSWERED
  COMPLETED
  FAILED
  BUSY
  NO_ANSWER
}

enum AppointmentType {
  SALES_CONSULTATION
  TEST_DRIVE
  VEHICLE_DELIVERY
  SERVICE_APPOINTMENT
  FINANCING_MEETING
  TRADE_IN_APPRAISAL
  FOLLOW_UP_MEETING
  PHONE_CONSULTATION
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
  RESCHEDULED
}

// Communication Models
model Message {
  id          String      @id @default(cuid())
  type        MessageType
  channel     MessageChannel
  subject     String?     // For emails
  content     String
  status      MessageStatus @default(PENDING)
  direction   MessageDirection

  // Metadata
  externalId  String?     // Twilio SID, email ID, etc.
  metadata    Json?       // Channel-specific data
  readAt      DateTime?
  deliveredAt DateTime?
  failedAt    DateTime?
  errorMessage String?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  sender      User?    @relation("MessageSender", fields: [senderId], references: [id])
  senderId    String?
  receiver    User?    @relation("MessageReceiver", fields: [receiverId], references: [id])
  receiverId  String?
  customer    Customer @relation(fields: [customerId], references: [id])
  customerId  String

  // Optional relations
  lead        Lead?    @relation(fields: [leadId], references: [id])
  leadId      String?
  appointment Appointment? @relation(fields: [appointmentId], references: [id])
  appointmentId String?
  task        Task?    @relation(fields: [taskId], references: [id])
  taskId      String?
  serviceRequest ServiceRequest? @relation(fields: [serviceRequestId], references: [id])
  serviceRequestId String?

  @@map("messages")
}

// Task Management
model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  type        TaskType
  priority    TaskPriority @default(MEDIUM)
  status      TaskStatus @default(PENDING)

  dueDate     DateTime?
  completedAt DateTime?

  // Automation fields
  isAutomated Boolean @default(false)
  triggerType String? // "lead_created", "appointment_completed", etc.
  triggerData Json?   // Additional trigger context

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  assignee    User?    @relation("TaskAssignee", fields: [assigneeId], references: [id])
  assigneeId  String?
  creator     User     @relation("TaskCreator", fields: [creatorId], references: [id])
  creatorId   String
  customer    Customer @relation(fields: [customerId], references: [id])
  customerId  String

  // Optional relations
  lead        Lead?    @relation(fields: [leadId], references: [id])
  leadId      String?
  appointment Appointment? @relation(fields: [appointmentId], references: [id])
  appointmentId String?
  serviceRequest ServiceRequest? @relation(fields: [serviceRequestId], references: [id])
  serviceRequestId String?

  // Related messages and subtasks
  messages    Message[]
  parentTask  Task?    @relation("TaskHierarchy", fields: [parentTaskId], references: [id])
  parentTaskId String?
  subtasks    Task[]   @relation("TaskHierarchy")

  @@map("tasks")
}

// Campaign Management
model Campaign {
  id          String        @id @default(cuid())
  name        String
  description String?
  type        CampaignType
  status      CampaignStatus @default(DRAFT)

  // Trigger conditions
  triggerEvent String       // "lead_created", "appointment_no_show", etc.
  triggerConditions Json?   // Additional conditions

  // Campaign settings
  isActive    Boolean @default(false)
  startDate   DateTime?
  endDate     DateTime?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  creator     User     @relation(fields: [creatorId], references: [id])
  creatorId   String
  steps       CampaignStep[]
  executions  CampaignExecution[]

  @@map("campaigns")
}

model CampaignStep {
  id          String   @id @default(cuid())
  order       Int
  name        String
  type        CampaignStepType

  // Timing
  delayDays   Int      @default(0)
  delayHours  Int      @default(0)

  // Content
  subject     String?  // For emails
  content     String
  channel     MessageChannel

  // Conditions
  conditions  Json?    // When to execute this step

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  campaign    Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  campaignId  String
  executions  CampaignStepExecution[]

  @@map("campaign_steps")
}

model CampaignExecution {
  id          String   @id @default(cuid())
  status      CampaignExecutionStatus @default(ACTIVE)

  startedAt   DateTime @default(now())
  completedAt DateTime?
  pausedAt    DateTime?

  // Context
  triggerData Json?    // Data that triggered this execution

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  campaign    Campaign @relation(fields: [campaignId], references: [id])
  campaignId  String
  customer    Customer @relation(fields: [customerId], references: [id])
  customerId  String
  executor    User     @relation(fields: [executorId], references: [id])
  executorId  String

  // Optional relations
  lead        Lead?    @relation(fields: [leadId], references: [id])
  leadId      String?
  appointment Appointment? @relation(fields: [appointmentId], references: [id])
  appointmentId String?

  stepExecutions CampaignStepExecution[]

  @@map("campaign_executions")
}

model CampaignStepExecution {
  id          String   @id @default(cuid())
  status      CampaignStepExecutionStatus @default(PENDING)

  scheduledAt DateTime
  executedAt  DateTime?
  failedAt    DateTime?
  errorMessage String?

  // Results
  messageId   String?  // If this step sent a message
  taskId      String?  // If this step created a task

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  execution   CampaignExecution @relation(fields: [executionId], references: [id], onDelete: Cascade)
  executionId String
  step        CampaignStep @relation(fields: [stepId], references: [id])
  stepId      String

  @@map("campaign_step_executions")
}

// Communication Enums
enum MessageType {
  EMAIL
  SMS
  CHAT
  SYSTEM_NOTIFICATION
  CAMPAIGN_MESSAGE
}

enum MessageChannel {
  EMAIL
  SMS
  CHAT
  WHATSAPP
  PHONE
}

enum MessageStatus {
  PENDING
  SENT
  DELIVERED
  READ
  FAILED
  BOUNCED
}

enum MessageDirection {
  INBOUND
  OUTBOUND
}

// Task Management Enums
enum TaskType {
  FOLLOW_UP_CALL
  SEND_EMAIL
  SEND_SMS
  SCHEDULE_APPOINTMENT
  PREPARE_DOCUMENTS
  VEHICLE_INSPECTION
  CUSTOMER_RESEARCH
  LEAD_QUALIFICATION
  CUSTOM
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  OVERDUE
}

// Campaign Management Enums
enum CampaignType {
  LEAD_NURTURING
  FOLLOW_UP_SEQUENCE
  APPOINTMENT_REMINDERS
  POST_SALE_FOLLOW_UP
  RE_ENGAGEMENT
  PROMOTIONAL
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  ARCHIVED
}

enum CampaignStepType {
  SEND_EMAIL
  SEND_SMS
  CREATE_TASK
  WAIT
  CONDITIONAL
}

enum CampaignExecutionStatus {
  ACTIVE
  COMPLETED
  PAUSED
  FAILED
  CANCELLED
}

enum CampaignStepExecutionStatus {
  PENDING
  EXECUTING
  COMPLETED
  FAILED
  SKIPPED
}

// Roadside Assistance Models
model EmergencyCall {
  id          String   @id @default(cuid())
  callType    EmergencyCallType
  priority    EmergencyPriority @default(MEDIUM)
  status      EmergencyCallStatus @default(RECEIVED)

  // Location information
  latitude    Float?
  longitude   Float?
  address     String?
  landmark    String?

  // Call details
  description String
  symptoms    String?
  vehicleInfo String?

  // Timing
  receivedAt  DateTime @default(now())
  dispatchedAt DateTime?
  arrivedAt   DateTime?
  completedAt DateTime?

  // Metadata
  estimatedArrival DateTime?
  actualArrival   DateTime?
  notes       String?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  customer    Customer @relation(fields: [customerId], references: [id])
  customerId  String
  vehicle     Vehicle? @relation(fields: [vehicleId], references: [id])
  vehicleId   String?
  handler     User?    @relation("EmergencyCallHandler", fields: [handlerId], references: [id])
  handlerId   String?

  // Service request created from this emergency call
  serviceRequest ServiceRequest?

  @@map("emergency_calls")
}

model ServiceProvider {
  id          String   @id @default(cuid())
  name        String
  type        ServiceProviderType

  // Contact information
  phone       String
  email       String?
  address     String
  city        String
  state       String
  zipCode     String

  // Service area
  serviceRadius Float  // in miles
  latitude    Float
  longitude   Float

  // Capabilities
  services    ServiceType[]

  // Availability
  isActive    Boolean @default(true)
  isAvailable Boolean @default(true)

  // Business hours
  hoursOfOperation Json? // Store business hours as JSON

  // Performance metrics
  averageRating Float?
  totalJobs   Int    @default(0)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  serviceRequests ServiceRequest[]
  reviews        ServiceReview[]

  @@map("service_providers")
}

model ServiceRequest {
  id          String   @id @default(cuid())
  requestNumber String @unique // Human-readable request number

  type        ServiceType
  priority    ServicePriority @default(MEDIUM)
  status      ServiceRequestStatus @default(PENDING)

  // Location
  latitude    Float
  longitude   Float
  address     String

  // Service details
  description String
  symptoms    String?
  vehicleInfo String?

  // Timing
  requestedAt DateTime @default(now())
  scheduledAt DateTime?
  dispatchedAt DateTime?
  arrivedAt   DateTime?
  startedAt   DateTime?
  completedAt DateTime?

  // Cost and billing
  estimatedCost Float?
  actualCost    Float?
  billableHours Float?

  // Service details
  workPerformed String?
  partsUsed     String?
  notes         String?

  // Customer satisfaction
  customerRating Int?
  customerFeedback String?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  customer      Customer @relation(fields: [customerId], references: [id])
  customerId    String
  vehicle       Vehicle? @relation(fields: [vehicleId], references: [id])
  vehicleId     String?
  emergencyCall EmergencyCall? @relation(fields: [emergencyCallId], references: [id])
  emergencyCallId String? @unique

  serviceProvider ServiceProvider? @relation(fields: [serviceProviderId], references: [id])
  serviceProviderId String?

  assignedTo    User?    @relation("ServiceRequestAssignee", fields: [assignedToId], references: [id])
  assignedToId  String?
  dispatcher    User?    @relation("ServiceRequestDispatcher", fields: [dispatcherId], references: [id])
  dispatcherId  String?

  // Related records
  messages      Message[]
  tasks         Task[]
  statusUpdates ServiceStatusUpdate[]
  reviews       ServiceReview[]

  @@map("service_requests")
}

model ServiceStatusUpdate {
  id          String   @id @default(cuid())
  status      ServiceRequestStatus
  message     String
  location    String?
  latitude    Float?
  longitude   Float?
  estimatedArrival DateTime?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  serviceRequest ServiceRequest @relation(fields: [serviceRequestId], references: [id], onDelete: Cascade)
  serviceRequestId String
  updatedBy     User?    @relation(fields: [updatedById], references: [id])
  updatedById   String?

  @@map("service_status_updates")
}

model ServiceReview {
  id          String   @id @default(cuid())
  rating      Int      // 1-5 stars
  comment     String?

  // Review categories
  timeliness  Int?     // 1-5 rating
  quality     Int?     // 1-5 rating
  professionalism Int? // 1-5 rating

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  serviceProvider ServiceProvider @relation(fields: [serviceProviderId], references: [id])
  serviceProviderId String
  customer        Customer @relation(fields: [customerId], references: [id])
  customerId      String
  serviceRequest  ServiceRequest? @relation(fields: [serviceRequestId], references: [id])
  serviceRequestId String?

  @@map("service_reviews")
}

// Roadside Assistance Enums
enum EmergencyCallType {
  BREAKDOWN
  ACCIDENT
  FLAT_TIRE
  DEAD_BATTERY
  LOCKOUT
  OUT_OF_FUEL
  OVERHEATING
  TOWING_REQUEST
  MECHANICAL_ISSUE
  OTHER
}

enum EmergencyPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
  LIFE_THREATENING
}

enum EmergencyCallStatus {
  RECEIVED
  TRIAGED
  DISPATCHED
  EN_ROUTE
  ARRIVED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  FAILED
}

enum ServiceProviderType {
  TOWING_COMPANY
  MOBILE_MECHANIC
  TIRE_SERVICE
  LOCKSMITH
  FUEL_DELIVERY
  BATTERY_SERVICE
  GENERAL_ROADSIDE
  EMERGENCY_RESPONSE
}

enum ServiceType {
  TOWING
  JUMP_START
  TIRE_CHANGE
  LOCKOUT_SERVICE
  FUEL_DELIVERY
  MECHANICAL_REPAIR
  WINCH_OUT
  BATTERY_REPLACEMENT
  EMERGENCY_REPAIR
  ACCIDENT_ASSISTANCE
}

enum ServicePriority {
  LOW
  MEDIUM
  HIGH
  EMERGENCY
}

enum ServiceRequestStatus {
  PENDING
  ASSIGNED
  DISPATCHED
  EN_ROUTE
  ARRIVED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  FAILED
  REQUIRES_FOLLOWUP
}
